import requests
from openai import OpenAI
import json
import pandas as pd

# Create LLM client using custom Azure OpenAI endpoint
llmClient = OpenAI(
    api_key="dummy",  # Overwritten by API manager
    base_url="https://aoai-farm.bosch-temp.com/api/openai/deployments/askbosch-prod-farm-openai-gpt-4o-mini-2024-07-18",
    default_headers={"genaiplatform-farm-subscription-key": "e3b62450ed794963896276597b8bd87a"}
)

# Query LLM with a given prompt
def queryLLM(promptQuery, model_name="gpt-4o-mini"):
    try:
        completion = llmClient.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": promptQuery}],
            extra_query={"api-version": "2024-08-01-preview"},
            temperature=0.8
        )
        return completion.choices[0].message.content
    except Exception as e:
        return f"An error occurred during LLM query: {e}"


def fetch_and_analyze_cve(cve_id, proxy_url=None, export_format="json", file_path="cve_output"):
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    params = {"cveId": cve_id}
    headers = {"User-Agent": "CVE-Fetcher/1.0"}
    proxies = {"http": proxy_url, "https": proxy_url} if proxy_url else None

    try:
        response = requests.get(url, headers=headers, params=params, proxies=proxies, timeout=10)
        response.raise_for_status()
        data = response.json()

        vulnerabilities = data.get("vulnerabilities", [])
        if not vulnerabilities:
            return {"error": f"No CVE data found for {cve_id}"}

        cve_data = vulnerabilities[0].get("cve", {})
        description = next(
            (desc["value"] for desc in cve_data.get("descriptions", []) if desc["lang"] == "en"),
            "No English description available."
        )

        metrics = cve_data.get("metrics", {})
        cvss_score = None
        severity_level = None
        vector = None

        if "cvssMetricV31" in metrics:
            cvss = metrics["cvssMetricV31"][0]
        elif "cvssMetricV30" in metrics:
            cvss = metrics["cvssMetricV30"][0]
        elif "cvssMetricV2" in metrics:
            cvss = metrics["cvssMetricV2"][0]
        else:
            cvss = None

        if cvss:
            cvss_score = cvss.get("cvssData", {}).get("baseScore")
            severity_level = cvss.get("cvssData", {}).get("baseSeverity", "Unknown")
            vector = cvss.get("cvssData", {}).get("vectorString")

        recommendations = []

        if severity_level in ("HIGH", "CRITICAL"):
            recommendations.append("Patch or upgrade the affected software immediately.")
            recommendations.append("Check vendor advisories for fixed versions.")
            recommendations.append("Monitor systems for signs of exploitation.")
        elif severity_level == "MEDIUM":
            recommendations.append("Schedule patching in your next maintenance window.")
        elif severity_level == "LOW":
            recommendations.append("Monitor but prioritize based on exposure.")
        else:
            recommendations.append("Review vulnerability manually due to unknown severity.")

        if vector and "NETWORK" in vector.upper():
            recommendations.append("Expose affected services behind a firewall or VPN.")
            recommendations.append("Limit network access to trusted sources.")

        result = {
            "id": cve_data.get("id"),
            "published": cve_data.get("published"),
            "lastModified": cve_data.get("lastModified"),
            "description": description,
            "cvss_score": cvss_score,
            "severity": severity_level,
            "vector": vector,
            "recommendations": recommendations,
            "references": [ref["url"] for ref in cve_data.get("references", [])],
        }

        # Export to file
        if export_format == "json":
            with open(f"{file_path}.json", "w") as f:
                json.dump(result, f, indent=4)
        elif export_format == "excel":
            df = pd.DataFrame([{
                "CVE ID": result["id"],
                "Published": result["published"],
                "Last Modified": result["lastModified"],
                "Description": result["description"],
                "CVSS Score": result["cvss_score"],
                "Severity": result["severity"],
                "Vector": result["vector"],
                "Recommendations": "\n".join(result["recommendations"]),
                "References": "\n".join(result["references"])
            }])
            df.to_excel(f"{file_path}.xlsx", index=False)
        else:
            return {"error": "Unsupported export format. Use 'json' or 'excel'."}

        return {"status": "success", "file": f"{file_path}.{export_format}"}

    except requests.exceptions.RequestException as e:
        return {"error": f"Request error: {str(e)}"}
    except Exception as e:
        return {"error": f"Unexpected error: {str(e)}"}

        

#result = fetch_and_analyze_cve("CVE-2023-0464", proxy_url=proxy)



# Save as Excel
#fetch_and_analyze_cve("CVE-2023-0464", proxy_url="http://proxy.company.com:8080", export_format="excel", file_path="cve_0464")
#print(result)

# Run the analysis
if __name__ == "__main__":
 #   cve_id = "CVE-2023-0464"
  proxy = "http://rb-proxy-in.bosch.com:8080"
  # Save as JSON
  file_path = "C:/Hackathon/cve_0464"
  fetch_and_analyze_cve("CVE-2023-0464", proxy_url="http://rb-proxy-in.bosch.com:8080",export_format="json", file_path=file_path)
  #  api_key = "e3b62450ed794963896276597b8bd87a"
   
   # cve_id = "CVE-2023-0464"
    #details = fetch_cve_details_v2(cve_id)
    #print(details)
    #try:
        #cve_data = fetch_cve_data(cve_id)
     #   cve_data = fetch_cve_details_v2(cve_id, api_key)
      #  result = parse_cve_data_v2(cve_data)
       # export_results(result, "results.json", "results.xlsx")
       # print("✅ Export completed: results.json and results.xlsx")
    #except Exception as e:
     #   print(f"❌ Error: {e}")
